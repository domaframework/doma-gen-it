apply plugin: 'java'
apply plugin: 'groovy'

version = '2.20.0'
ext.dependentVersion = '2.20.0'

sourceSets {
    genmain
    gentest

    // add classpath for test
    test {
        compileClasspath += sourceSets.genmain.output
        compileClasspath += sourceSets.gentest.output
        runtimeClasspath += sourceSets.genmain.output
        runtimeClasspath += sourceSets.gentest.output
    }
}

processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

processGenmainResources.destinationDir = compileGenmainJava.destinationDir
compileGenmainJava.dependsOn processGenmainResources

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-proc:none"]
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-proc:none"]
}

compileGenmainJava {
    options.encoding = 'UTF-8'
}

compileGentestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-proc:none"]
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Doma-Gen-IT', 'Implementation-Version': version
    }
}

test {
    systemProperty 'url', jdbcUrl
    systemProperty 'user', jdbcUser
    systemProperty 'password', jdbcPassword
}

def runsOn(dbms) {
    jdbcUrl.startsWith("jdbc:$dbms:");
}

def testTmpDir() {
    "${sourceSets.test.java.srcDirs[0]}/tmp"
}

task deleteGeneratedFiles(type: Delete) {
    delete javaDestDir
    delete resourcesDestDir
    delete testDestDir
    delete testTmpDir()
}

task gen(dependsOn: [classes, deleteGeneratedFiles]) {
    doLast {
        ant.taskdef(
            resource: 'domagentask.properties', 
            classpath: (configurations.antRuntime + sourceSets.main.output).asPath) {
        }
        ant.echo(file: "${resourcesDestDir}/template/lib.ftl", message: """\
            |<#assign copyright>
            |/*
            | * Copyright 2008-2009 ...
            | * All rights reserved.
            | */
            |</#assign>
            |
            |<#assign author="Nakamura">""".stripMargin())
        ant.gen(
            url: jdbcUrl, 
            user: jdbcUser,
            password: jdbcPassword,
            globalFactoryClassName: globalFactoryClassName,
            templatePrimaryDir: "${resourcesDestDir}/template") {
    
            entityConfig(destDir: javaDestDir)
            daoConfig(destDir: javaDestDir)
            sqlConfig(destDir: resourcesDestDir)
        }
    }
}

task genEntity(dependsOn: [classes, deleteGeneratedFiles]) {
    doLast {
        ant.taskdef(
            resource: 'domagentask.properties', 
            classpath: (configurations.antRuntime + sourceSets.main.output).asPath) {
        }
        if (runsOn('hsqldb')) {
            ant.gen(
                url: jdbcUrl, 
                user: jdbcUser,
                password: jdbcPassword,
                globalFactoryClassName: globalFactoryClassName) {
    
                entityConfig(
                    sql: 'select * from Employee',
                    destDir: javaDestDir,
                    entityName: 'MyEmployee')
            }
        }
    }
}

compileGenmainJava.dependsOn(gen, genEntity)

task genTestSuite(dependsOn: [compileGenmainJava]) {
    doLast {
        ant.taskdef(
            resource: 'domagentask.properties', 
            classpath: (configurations.antRuntime + sourceSets.main.output).asPath) {
        }
        ant.gen(
            url: jdbcUrl, 
            user: jdbcUser,
            password: jdbcPassword,
            globalFactoryClassName: globalFactoryClassName,
            templatePrimaryDir: "${resourcesDestDir}/template") {
    
            sqlTestCaseConfig(destDir: testDestDir) {
                fileset(dir: resourcesDestDir) {
                    include(name: 'META-INF/**/*.sql')
                }
            }
        }
    }
}

compileGentestJava.dependsOn genTestSuite

check {
    doLast {
        if (runsOn('hsqldb')) {
            assert file("${javaDestDir}/example/entity/MyEmployee.java").exists()
            assert file("${javaDestDir}/example/entity/Employee.java").exists()
            assert file("${testDestDir}/example/dao/EmployeeDaoTest.java").exists()
        }
        if (runsOn('mysql')) {
            assert file("${javaDestDir}/example/entity/Table0.java").exists()
            assert file("${javaDestDir}/example/dao/Table0Dao.java").exists()
            assert file("${testDestDir}/example/dao/Table0DaoTest.java").exists()
        }
    }
}

check.dependsOn(compileGentestJava)

configurations {
    antRuntime
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {url 'https://oss.sonatype.org/content/repositories/snapshots/'}
}
 
dependencies {
    implementation "org.seasar.doma:doma:${dependentVersion}"
    implementation "org.seasar.doma:doma-gen:${dependentVersion}"
    testImplementation 'junit:junit:4.11'
    testRuntimeOnly 'org.hsqldb:hsqldb:2.3.2'
    testRuntimeOnly 'mysql:mysql-connector-java:5.1.38'

    antRuntime "org.seasar.doma:doma-gen:${dependentVersion}"
    antRuntime 'org.hsqldb:hsqldb:2.3.2'
    antRuntime 'mysql:mysql-connector-java:5.1.38'

    genmainAnnotationProcessor "org.seasar.doma:doma:${dependentVersion}"
    genmainImplementation "org.seasar.doma:doma:${dependentVersion}"
    gentestImplementation "org.seasar.doma:doma:${dependentVersion}"
    gentestImplementation 'junit:junit:4.11'
}

apply from:'eclipse.gradle'
