apply plugin: 'java'
apply plugin: 'groovy'

version = '2.0.0-SNAPSHOT'

ext {
    jdbcUrl = 'jdbc:hsqldb:mem:doma_gen_it'
    jdbcUser = ''
    jdbcPassword = ''
    javaDestDir = 'src/genmain/java'
    resourcesDestDir = 'src/genmain/resources'
    testDestDir = 'src/gentest/java'
    globalFactoryClassName = 'org.seasar.doma.extension.gen.it.GenItGlobalFactory'
}

sourceSets {
    genmain
    gentest
}

processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

processGenmainResources.destinationDir = compileGenmainJava.destinationDir
compileGenmainJava.dependsOn processGenmainResources

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Doma-Gen-IT', 'Implementation-Version': version
    }
}

task deleteGeneratedFiles(type: Delete) {
    delete javaDestDir
    delete resourcesDestDir
    delete testDestDir
}

task gen(dependsOn: [classes, deleteGeneratedFiles]) << {
    ant.taskdef(
        resource: 'domagentask.properties', 
        classpath: (configurations.antRuntime + sourceSets.main.output).asPath) {
    }
    ant.echo(file: "${resourcesDestDir}/template/lib.ftl", message: """\
        |<#assign copyright>
        |/*
        | * Copyright 2008-2009 ...
        | * All rights reserved.
        | */
        |</#assign>
        |
        |<#assign author="Nakamura">""".stripMargin())
    ant.gen(
        url: jdbcUrl, 
        user: jdbcUser,
        password: jdbcPassword,
        globalFactoryClassName: globalFactoryClassName,
        templatePrimaryDir: "${resourcesDestDir}/template") {

        entityConfig(destDir: javaDestDir)
        daoConfig(destDir: javaDestDir)
        sqlConfig(destDir: resourcesDestDir)
    }
}

task genEntity(dependsOn: [classes, deleteGeneratedFiles]) << {
    ant.taskdef(
        resource: 'domagentask.properties', 
        classpath: (configurations.antRuntime + sourceSets.main.output).asPath) {
    }
    ant.gen(
        url: jdbcUrl, 
        user: jdbcUser,
        password: jdbcPassword,
        globalFactoryClassName: globalFactoryClassName) {

        entityConfig(
            sql: 'select * from Employee',
            destDir: javaDestDir,
            entityName: 'MyEmployee')
    }
}

compileGenmainJava.dependsOn(gen, genEntity)

task genTestSuite(dependsOn: compileGenmainJava) << {
    ant.taskdef(
        resource: 'domagentask.properties', 
        classpath: (configurations.antRuntime + sourceSets.main.output).asPath) {
    }
    ant.gen(
        url: jdbcUrl, 
        user: jdbcUser,
        password: jdbcPassword,
        globalFactoryClassName: globalFactoryClassName,
        templatePrimaryDir: "${resourcesDestDir}/template") {

        sqlTestCaseConfig(destDir: testDestDir) {
            fileset(dir: resourcesDestDir) {
                include(name: 'META-INF/**/*.sql')
            }
        }
    }
}

compileGentestJava.dependsOn genTestSuite

check << {
    assert file("${javaDestDir}/example/entity/MyEmployee.java").exists()
    assert file("${javaDestDir}/example/entity/Employee.java").exists()
    assert file("${testDestDir}/example/dao/EmployeeDaoTest.java").exists()
}

check.dependsOn compileGentestJava

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}

configurations {
    antRuntime
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {url 'https://oss.sonatype.org/content/repositories/snapshots/'}
}
 
dependencies {
    compile "org.seasar.doma:doma-gen:${version}"

    antRuntime "org.seasar.doma:doma-gen:${version}"
    antRuntime 'org.hsqldb:hsqldb:2.3.2'

    genmainCompile "org.seasar.doma:doma:${version}"

    gentestCompile "org.seasar.doma:doma:${version}"
    gentestCompile 'org.hsqldb:hsqldb:2.3.2'
    gentestCompile 'junit:junit:4.11'
}

apply from:'eclipse.gradle'